import google.generativeai as genai
import streamlit as st
import os

class ChatAgent:
    def __init__(self, api_key_env: str):
        """
        Initialize the ChatAgent with the specified API key.

        Args:
            api_key_env (str): Environment variable name for the API key.
        """
        api_key = os.getenv(api_key_env)
        if not api_key:
            raise ValueError(f"API key not found in environment variable '{api_key_env}'")

        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel("gemini-1.5-flash")

    def get_response(self, user_input: str, intent: str, entities: dict, retrieved_context: str) -> str:
        """
        Generate a response using the Gemini model.

        Args:
            user_input (str): The query entered by the user.
            intent (str): The selected domain or intent (e.g., "e_commerce").
            entities (dict): The detected entities and their values.
            retrieved_context (str): Relevant context retrieved by the retrieval agent.

        Returns:
            str: The response generated by the model.
        """
        try:
            # Construct the chat history
            chat_prompt = (
                f"You are an AI assistant specialized in the '{intent}' domain.\n"
                f"User Query: {user_input}\n"
                f"Detected Entities: {entities}\n"
                f"Retrieved Context: {retrieved_context}\n"
                f"Based on the above, generate a helpful response."
            )
            chat_session = self.model.start_chat(history=[])
            response = chat_session.send_message(chat_prompt)
            return response.text
        except Exception as e:
            return f"Error generating response: {e}"
